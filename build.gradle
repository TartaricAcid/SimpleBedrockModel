plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.80'
}

version = mod_version
group = mod_group_id
archivesBaseName = 'simplebedrockmodel-1.21.1-release'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }


        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }


        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}


repositories {
    mavenLocal()
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    implementation "maven.modrinth:sodium:mc1.21-0.6.0-beta.2-neoforge"
    compileOnly "maven.modrinth:embeddium:1.0.11+mc1.21.1-neoforge"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.compileJava {
    // dsx137: 强制重新编译和生成 refmap.json 文件，避免偶发情况下该文件丢失问题
    outputs.upToDateWhen { false }
}

// 用于 neoforge.mods 里替换那一堆 ${xxxx}
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// 生成 manifest 内容，用于填充版本信息等内容
jar {
    manifest {
        attributes([
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}"
        ])
    }
}

// 必须，编码需要显式指定为 UTF
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
// 禁用生成 module metadata 的任务
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = this.archivesBaseName
            pom {
                name = this.mod_name
                description = this.mod_description
                url = "https://github.com/TartaricAcid/SimpleBedrockModel"
                licenses {
                    license {
                        name = this.mod_license
                        url = "https://github.com/TartaricAcid/SimpleBedrockModel/blob/main/LICENSE"
                    }
                }
                withXml {
                    def node = asNode()
                    def deps = node.dependencies
                    if (deps != null) {
                        node.remove(deps)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

// 让 idea 主动下载前置库的源码和 Javadoc
// 新版本 idea 默认不会下载这两个，这虽然加快了构建速度，但是不方便调试
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

java {
    // 编译源码文件，方便发布 maven
    withSourcesJar()
}
